var searchIndex = {};
searchIndex['image'] = {"items":[[0,"","image","This crate provides native rust implementations of\nImage encoders and decoders and basic image manipulation\nfunctions."],[3,"Luma","","Grayscale colors"],[3,"LumaA","","Grayscale colors + alpha channel"],[3,"Rgb","","RGB colors"],[3,"Rgba","","RGB colors + alpha channel"],[3,"SubImage","","A View into another image"],[3,"ImageBuffer","","Generic image buffer"],[3,"Pixels","","Immutable pixel iterator"],[3,"MutPixels","","Mutable pixel iterator"],[3,"Frame","","A single animation frame"],[3,"Frames","","Hold the frames of the animated image"],[4,"ColorType","","An enumeration over supported color types and their bit depths"],[13,"Gray","","Pixel is grayscale",0],[13,"RGB","","Pixel contains R, G and B channels",0],[13,"Palette","","Pixel is an index into a color palette",0],[13,"GrayA","","Pixel is grayscale with an alpha channel",0],[13,"RGBA","","Pixel is RGB with an alpha channel",0],[4,"ImageError","","An enumeration of Image Errors"],[13,"FormatError","","The Image is not formatted properly",1],[13,"DimensionError","","The Image's dimensions are either too small or too large",1],[13,"UnsupportedError","","The Decoder does not support this image format",1],[13,"UnsupportedColor","","The Decoder does not support this color type",1],[13,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",1],[13,"IoError","","An I/O Error occurred while decoding the image",1],[13,"ImageEnd","","The end of the image has been reached",1],[4,"ImageFormat","","An enumeration of supported image formats.\nNot all formats support both encoding and decoding."],[13,"PNG","","An Image in PNG Format",2],[13,"JPEG","","An Image in JPEG Format",2],[13,"GIF","","An Image in GIF Format",2],[13,"WEBP","","An Image in WEBP Format",2],[13,"PPM","","An Image in PPM Format",2],[13,"TIFF","","An Image in TIFF Format",2],[13,"TGA","","An Image in TGA Format",2],[4,"FilterType","","Available Sampling Filters"],[13,"Nearest","","Nearest Neighbor",3],[13,"Triangle","","Linear Filter",3],[13,"CatmullRom","","Cubic Filter",3],[13,"Gaussian","","Gaussian Filter",3],[13,"Lanczos3","","Lanczos with window 3",3],[4,"DynamicImage","","A Dynamic Image"],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",4],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",4],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",4],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",4],[5,"open","","Open the image located at the path specified.\nThe image's format is determined from the path's file extension."],[5,"load","","Create a new image from a Reader"],[5,"load_from_memory","","Create a new image from a byte slice\nMakes an educated guess about the image format.\nTGA is not supported by this function."],[5,"load_from_memory_with_format","","Create a new image from a byte slice"],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified."],[0,"math","","Mathematical helper functions and types."],[0,"utils","image::math","Shared mathematical utility functions."],[5,"clamp","image::math::utils","Cut value to be inside given range"],[0,"imageops","image","Image Processing Functions"],[5,"rotate90","image::imageops","Rotate an image 90 degrees clockwise."],[5,"rotate180","","Rotate an image 180 degrees clockwise."],[5,"rotate270","","Rotate an image 270 degrees clockwise."],[5,"flip_horizontal","","Flip an image horizontally"],[5,"flip_vertical","","Flip an image vertically"],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image.\n```kernel``` is an array of the filter weights of length 9."],[5,"resize","","Resize the supplied image to the specified dimensions\n```nwidth``` and ```nheight``` are the new dimensions.\n```filter``` is the sampling filter to use."],[5,"blur","","Performs a Gaussian blur on the supplied image.\n```sigma``` is a measure of how much to blur by."],[5,"unsharpen","","Performs an unsharpen mask on the supplied image\n```sigma``` is the amount to blur the image by.\n```threshold``` is the threshold for the difference between\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking"],[5,"grayscale","","Convert the supplied image to grayscale"],[5,"invert","","Invert each pixel within the supplied image\nThis function operates in place."],[5,"contrast","","Adjust the contrast of the supplied image\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast."],[5,"brighten","","Brighten the supplied image\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it."],[5,"crop","","Return a mutable view into an image"],[5,"overlay","","Overlay an image at a given coordinate (x, y)"],[0,"webp","image","Decoding of Webp Images"],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder."],[11,"new","","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",5],[11,"dimensions","","",5],[11,"colortype","","",5],[11,"row_len","","",5],[11,"read_scanline","","",5],[11,"read_image","","",5],[0,"vp8","","An implementation of the VP8 Video Codec"],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame"],[12,"width","","The width of the luma plane",6],[12,"height","","The height of the luma plane",6],[12,"ybuf","","The luma plane of the frame",6],[12,"keyframe","","Indicates whether this frame is a keyframe",6],[12,"for_display","","Indicates whether this frame is intended for display",6],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",6],[3,"VP8Decoder","","VP8 Decoder\nOnly decodes keyframes"],[11,"clone","","",6],[11,"fmt","","",6],[11,"default","","",6],[11,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",7],[11,"decode_frame","","Decodes the current frame and returns a reference to it",7],[0,"ppm","image","Encoding of portable pixmap Images"],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder."],[11,"new","","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",8],[11,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",8],[0,"png","image","Decoding and Encoding of PNG Images"],[3,"PNGDecoder","image::png","The representation of a PNG decoder"],[3,"PNGEncoder","","The representation of a PNG encoder"],[11,"new","","Create a new decoder that decodes from the stream ```r```",9],[11,"palette","","Returns a reference to the color palette used for indexed\ncolor images.\nEach array element is a tuple of RGB values.",9],[11,"dimensions","","",9],[11,"colortype","","",9],[11,"row_len","","",9],[11,"read_scanline","","",9],[11,"read_image","","",9],[11,"new","","Create a new encoder that writes its output to ```w```",10],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",10],[0,"zlib","","An Implementation of RFC 1950"],[3,"ZlibDecoder","image::png::zlib","A Zlib compressed stream decoder."],[11,"new","","Create a new decoder that decodes from a Reader",11],[11,"inner","","Return a mutable reference to the wrapped Reader",11],[11,"read","","",11],[0,"deflate","image::png","An Implementation of RFC 1951"],[3,"Inflater","image::png::deflate","A DEFLATE compressed stream decoder."],[11,"new","","Create a new decoder that decodes from a Reader",12],[11,"eof","","Indicate whether the end of the stream has been reached.",12],[11,"inner","","Return a mutable reference to the wrapped Reader",12],[11,"read","","",12],[0,"hash","image::png","This module provides implementations of common hashing algorithms."],[3,"Adler32","image::png::hash","An Implementation of the Adler-32 checksum"],[3,"Crc32","","An Implementation of the Crc-32 checksum"],[11,"new","","Create a new hasher.",13],[11,"update","","Update the internal hasher with the bytes from ```buf```",13],[11,"checksum","","Return the computed hash.",13],[11,"reset","","Reset this hasher to its initial state.",13],[11,"new","","Create a new hasher.",14],[11,"update","","Update the internal hasher with the bytes from ```buf```",14],[11,"checksum","","Return the computed hash.",14],[11,"reset","","Reset this hasher to its initial state.",14],[0,"jpeg","image","Decoding and Encoding of JPEG Images"],[3,"JPEGDecoder","image::jpeg","The representation of a JPEG decoder"],[3,"JPEGEncoder","","The representation of a JPEG encoder"],[3,"Component","","A representation of a JPEG component"],[12,"id","","The Component's identifier",15],[12,"h","","Horizontal sampling factor",15],[12,"v","","Vertical sampling factor",15],[12,"tq","","The quantization table selector",15],[12,"dc_table","","Index to the Huffman DC Table",15],[12,"ac_table","","Index to the AC Huffman Table",15],[12,"dc_pred","","The dc prediction of the component",15],[11,"new","","Create a new encoder that writes its output to ```w```",16],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```\nThe Image in encoded with subsampling ratio 4:2:2",16],[11,"clone","","",15],[11,"new","","Create a new decoder that decodes from the stream ```r```",17],[11,"dimensions","","",17],[11,"colortype","","",17],[11,"row_len","","",17],[11,"read_scanline","","",17],[11,"read_image","","",17],[0,"gif","image","Decoding of GIF Images"],[3,"GIFDecoder","image::gif","A gif decoder"],[3,"GIFEncoder","","A GIF encoder."],[4,"ColorMode","","The color mode the encoder will use to encode the image."],[13,"TrueColor","","Image will be encoded in multiple frames if more than 256 colors are present",18],[13,"Indexed","","Number of colors will be reduced",18],[11,"new","","Creates a new GIF decoder",19],[11,"dimensions","","",19],[11,"colortype","","",19],[11,"row_len","","",19],[11,"read_scanline","","",19],[11,"read_image","","",19],[11,"fmt","","",18],[11,"new","","Creates a new GIF encoder",20],[11,"encode","","Encodes the image",20],[0,"tiff","image","Decoding and Encoding of TIFF Images"],[3,"TIFFDecoder","image::tiff","The representation of a PNG decoder"],[4,"ByteOrder","","Byte order of the TIFF file."],[13,"LittleEndian","","little endian byte order",21],[13,"BigEndian","","big endian byte order",21],[11,"fmt","","",22],[11,"new","","Create a new decoder that decodes from the stream ```r```",22],[11,"init","","Initializes the decoder.",22],[11,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",22],[11,"more_images","","Returns `true` if there is at least one more image available.",22],[11,"byte_order","","Returns the byte_order",22],[11,"read_short","","Reads a TIFF short value",22],[11,"read_long","","Reads a TIFF long value",22],[11,"read_offset","","Reads a TIFF IFA offset/value field",22],[11,"goto_offset","","Moves the cursor to the specified offset",22],[11,"dimensions","","",22],[11,"colortype","","",22],[11,"row_len","","",22],[11,"read_scanline","","",22],[11,"read_image","","",22],[11,"fmt","","",21],[0,"tga","image","Decoding of TGA Images"],[3,"TGADecoder","image::tga","The representation of a TGA decoder"],[11,"new","","Create a new decoder that decodes from the stream `r`",23],[11,"dimensions","","",23],[11,"colortype","","",23],[11,"row_len","","",23],[11,"read_scanline","","",23],[11,"read_image","","",23],[11,"eq","image","",1],[11,"ne","","",1],[11,"fmt","","",1],[11,"clone","","",1],[11,"fmt","","",1],[11,"from_error","","",1],[11,"fmt","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"next","","",24],[11,"next","","",25],[11,"new","","Construct a new subimage",26],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",26],[11,"change_bounds","","Change the coordinates of this subimage.",26],[11,"to_image","","Convert this subimage to an ImageBuffer",26],[11,"dimensions","","",26],[11,"bounds","","",26],[11,"get_pixel","","",26],[11,"put_pixel","","",26],[11,"blend_pixel","","",26],[11,"get_pixel_mut","","",26],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",4],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey\npixels with transparency.",4],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",4],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",4],[11,"to_rgb","","Returns a copy of this image as an RGB image.",4],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",4],[11,"to_luma","","Returns a copy of this image as a Luma image.",4],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",4],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",4],[11,"as_rgb8","","Return a reference to an 8bit RGB image",4],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",4],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",4],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",4],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",4],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",4],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",4],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",4],[11,"raw_pixels","","Return this image's pixels as a byte vector.",4],[11,"color","","Return this image's color type.",4],[11,"grayscale","","Return a grayscale version of this image.",4],[11,"invert","","Invert the colors of this image.\nThis method operates inplace.",4],[11,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image's aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image's dimensions",4],[11,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image's dimensions",4],[11,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",4],[11,"unsharpen","","Performs an unsharpen mask on this image\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking",4],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",4],[11,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",4],[11,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",4],[11,"flipv","","Flip this image vertically",4],[11,"fliph","","Flip this image horizontally",4],[11,"rotate90","","Rotate this image 90 degrees clockwise.",4],[11,"rotate180","","Rotate this image 180 degrees clockwise.",4],[11,"rotate270","","Rotate this image 270 degrees clockwise.",4],[11,"save","","Encode this image and write it to ```w```",4],[11,"dimensions","","",4],[11,"bounds","","",4],[11,"get_pixel","","",4],[11,"put_pixel","","",4],[11,"blend_pixel","","",4],[11,"get_pixel_mut","","",4],[11,"clone","","",0],[11,"fmt","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"hash","","",27],[11,"fmt","","",27],[11,"clone","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"channel_count","","",27],[11,"color_model","","",27],[11,"color_type","","",27],[11,"channels","","",27],[11,"channels_mut","","",27],[11,"channels4","","",27],[11,"from_channels","","",27],[11,"from_slice","","",27],[11,"from_slice_mut","","",27],[11,"to_rgb","","",27],[11,"to_rgba","","",27],[11,"to_luma","","",27],[11,"to_luma_alpha","","",27],[11,"map","","",27],[11,"apply","","",27],[11,"map_with_alpha","","",27],[11,"apply_with_alpha","","",27],[11,"map2","","",27],[11,"apply2","","",27],[11,"invert","","",27],[11,"blend","","",27],[11,"index","","",27],[11,"index_mut","","",27],[11,"hash","","",28],[11,"fmt","","",28],[11,"clone","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"channel_count","","",28],[11,"color_model","","",28],[11,"color_type","","",28],[11,"channels","","",28],[11,"channels_mut","","",28],[11,"channels4","","",28],[11,"from_channels","","",28],[11,"from_slice","","",28],[11,"from_slice_mut","","",28],[11,"to_rgb","","",28],[11,"to_rgba","","",28],[11,"to_luma","","",28],[11,"to_luma_alpha","","",28],[11,"map","","",28],[11,"apply","","",28],[11,"map_with_alpha","","",28],[11,"apply_with_alpha","","",28],[11,"map2","","",28],[11,"apply2","","",28],[11,"invert","","",28],[11,"blend","","",28],[11,"index","","",28],[11,"index_mut","","",28],[11,"hash","","",29],[11,"fmt","","",29],[11,"clone","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"channel_count","","",29],[11,"color_model","","",29],[11,"color_type","","",29],[11,"channels","","",29],[11,"channels_mut","","",29],[11,"channels4","","",29],[11,"from_channels","","",29],[11,"from_slice","","",29],[11,"from_slice_mut","","",29],[11,"to_rgb","","",29],[11,"to_rgba","","",29],[11,"to_luma","","",29],[11,"to_luma_alpha","","",29],[11,"map","","",29],[11,"apply","","",29],[11,"map_with_alpha","","",29],[11,"apply_with_alpha","","",29],[11,"map2","","",29],[11,"apply2","","",29],[11,"invert","","",29],[11,"blend","","",29],[11,"index","","",29],[11,"index_mut","","",29],[11,"hash","","",30],[11,"fmt","","",30],[11,"clone","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"channel_count","","",30],[11,"color_model","","",30],[11,"color_type","","",30],[11,"channels","","",30],[11,"channels_mut","","",30],[11,"channels4","","",30],[11,"from_channels","","",30],[11,"from_slice","","",30],[11,"from_slice_mut","","",30],[11,"to_rgb","","",30],[11,"to_rgba","","",30],[11,"to_luma","","",30],[11,"to_luma_alpha","","",30],[11,"map","","",30],[11,"apply","","",30],[11,"map_with_alpha","","",30],[11,"apply_with_alpha","","",30],[11,"map2","","",30],[11,"apply2","","",30],[11,"invert","","",30],[11,"blend","","",30],[11,"index","","",30],[11,"index_mut","","",30],[11,"from_color","","",28],[11,"from_color","","",28],[11,"from_color","","",28],[11,"from_color","","",30],[11,"from_color","","",30],[11,"from_color","","",30],[11,"from_color","","",29],[11,"from_color","","",29],[11,"from_color","","",29],[11,"from_color","","",27],[11,"from_color","","",27],[11,"from_color","","",27],[11,"blend","","",30],[11,"blend","","",28],[11,"blend","","",29],[11,"blend","","",27],[11,"invert","","",30],[11,"invert","","",28],[11,"invert","","",29],[11,"invert","","",27],[11,"as_mut_slice","collections::vec","",31],[11,"from_raw","image","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)\nReturns None if the container is not big enough",32],[11,"into_raw","","Returns the underlying raw buffer",32],[11,"dimensions","","The width and height of this image.",32],[11,"width","","The width of this image.",32],[11,"height","","The height of this image.",32],[11,"as_slice","","The raw image data as a slice.",32],[11,"as_mut_slice","","The raw image data as a slice.",32],[11,"pixels","","Returns an iterator over the pixels of this image.",32],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",32],[11,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",32],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",32],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",32],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",32],[11,"put_pixel","","Puts a pixel at location `(x, y)`",32],[11,"save","","Saves the buffer to a file at the path specified.",32],[11,"clone","","",32],[11,"dimensions","","",32],[11,"bounds","","",32],[11,"get_pixel","","",32],[11,"get_pixel_mut","","",32],[11,"put_pixel","","",32],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",32],[11,"index","","",32],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",32],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",32],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel's x and y coordinates.",32],[11,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",32],[11,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",32],[11,"convert","","",32],[11,"new","","Contructs a new frame iterator",33],[11,"clone","","",34],[11,"new","","Contructs a new frame",34],[11,"from_parts","","Contructs a new frame",34],[11,"delay","","Delay of this frame",34],[11,"buffer","","Returns the image buffer",34],[11,"into_buffer","","Returns the image buffer",34],[11,"left","","Returns the x offset",34],[11,"top","","Returns the x offset",34],[11,"next","","",33],[6,"ImageResult","","Result of an image decoding/encoding process"],[6,"RgbImage","","Sendable Rgb image buffer"],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer"],[6,"GrayImage","","Sendable grayscale image buffer"],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer"],[8,"Primitive","","Primitive trait from old stdlib, added max_value"],[10,"max_value","","The maximum value of primitive.",35],[8,"Pixel","","A generalized pixel."],[16,"Subpixel","image::Pixel","The underlying subpixel type."],[10,"channel_count","image","Returns the number of channels of this pixel type.",36],[10,"channels","","Returns the components as a slice.",36],[10,"channels_mut","","Returns the components as a mutable slice",36],[10,"color_model","","Returns a string that can help to interprete the meaning each channel\nSee [gimp babl](http://gegl.org/babl/).",36],[10,"color_type","","Returns the ColorType for this pixel format",36],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel\nhas less than 4 channels the remainder is filled with the maximum value\nTODO deprecate",36],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d.\nIf the pixel does not contain 4 channels the extra are ignored.\nTODO deprecate",36],[10,"from_slice","","Returns a view into a slice.",36],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",36],[10,"to_rgb","","Convert this pixel to RGB",36],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",36],[10,"to_luma","","Convert this pixel to luma",36],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",36],[10,"map","","Apply the function ```f``` to each channel of this pixel.",36],[10,"apply","","Apply the function ```f``` to each channel of this pixel.",36],[10,"map_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel.",36],[10,"apply_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel. Works in-place.",36],[10,"map2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise.",36],[10,"apply2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise. Works in-place.",36],[10,"invert","","Invert this pixel",36],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",36],[8,"ImageDecoder","","The trait that all decoders implement"],[10,"dimensions","","Returns a tuple containing the width and height of the image",37],[10,"colortype","","Returns the color type of the image e.g RGB(8) (8bit RGB)",37],[10,"row_len","","Returns the length in bytes of one decoded row of the image",37],[11,"is_animated","","Returns true if the image is animated",37],[11,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",37],[10,"read_scanline","","Reads one row from the image into buf and returns the row index",37],[10,"read_image","","Decodes the entire image and return it as a Vector",37],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",37],[8,"GenericImage","","A trait for manipulating images."],[16,"Pixel","image::GenericImage","The type of pixel."],[10,"dimensions","image","The width and height of this image.",38],[11,"width","","The width of this image.",38],[11,"height","","The height of this image.",38],[10,"bounds","","The bounding rectangle of this image.",38],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",38],[10,"get_pixel","","Returns the pixel located at (x, y)",38],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",38],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",38],[10,"put_pixel","","Put a pixel at location (x, y)",38],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",38],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",38],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",38],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",38],[11,"copy_from","","Copies all of the pixels from another image into this image.",38],[11,"sub_image","","Returns a subimage that is a view into this image.",38],[11,"is_animated","","Returns true if the image is animated",37],[11,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",37],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",37],[11,"width","","The width of this image.",38],[11,"height","","The height of this image.",38],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",38],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",38],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",38],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",38],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",38],[11,"copy_from","","Copies all of the pixels from another image into this image.",38],[11,"sub_image","","Returns a subimage that is a view into this image.",38],[11,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to\nadjust it's alpha value accordingly.",39]],"paths":[[4,"ColorType"],[4,"ImageError"],[4,"ImageFormat"],[4,"FilterType"],[4,"DynamicImage"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ZlibDecoder"],[3,"Inflater"],[3,"Adler32"],[3,"Crc32"],[3,"Component"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[4,"ColorMode"],[3,"GIFDecoder"],[3,"GIFEncoder"],[4,"ByteOrder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"Rgb"],[3,"Luma"],[3,"Rgba"],[3,"LumaA"],[3,"Vec"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"Primitive"],[8,"Pixel"],[8,"ImageDecoder"],[8,"GenericImage"],[6,"GrayImage"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics."],[5,"zero","","Returns the additive identity, `0`."],[5,"one","","Returns the multiplicative identity, `1`."],[5,"abs","","Computes the absolute value."],[5,"abs_sub","","The positive difference of two numbers."],[5,"signum","","Returns the sign of the number."],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring."],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`)."],[3,"BigUint","num::bigint","A big unsigned integer type."],[3,"BigInt","","A big signed integer type."],[4,"Sign","","A Sign is a `BigInt`'s composing element."],[13,"Minus","","",0],[13,"NoSign","","",0],[13,"Plus","","",0],[4,"ParseBigIntError","",""],[13,"ParseInt","","",1],[13,"Other","","",1],[0,"big_digit","",""],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s."],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`"],[17,"BITS","",""],[17,"BASE","",""],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element."],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`."],[17,"ZERO_BIG_DIGIT","",""],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`."],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`."],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3],[8,"RandBigInt","",""],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4],[11,"fmt","","",5],[11,"decode","","",5],[11,"encode","","",5],[11,"clone","","",5],[11,"eq","","",5],[11,"partial_cmp","","",5],[11,"cmp","","",5],[11,"default","","",5],[11,"hash","","",5],[11,"fmt","","",5],[6,"Err","",""],[11,"from_str","","",5],[6,"Output","",""],[11,"bitand","","",5],[6,"Output","",""],[6,"Output","",""],[11,"bitand","","",5],[6,"Output","",""],[6,"Output","",""],[11,"bitor","","",5],[6,"Output","",""],[6,"Output","",""],[11,"bitor","","",5],[6,"Output","",""],[6,"Output","",""],[11,"bitxor","","",5],[6,"Output","",""],[6,"Output","",""],[11,"bitxor","","",5],[6,"Output","",""],[6,"Output","",""],[11,"shl","","",5],[6,"Output","",""],[6,"Output","",""],[11,"shr","","",5],[6,"Output","",""],[11,"zero","","",5],[11,"is_zero","","",5],[11,"one","","",5],[6,"Output","",""],[11,"add","","",5],[6,"Output","",""],[6,"Output","",""],[11,"add","","",5],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",5],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",5],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",5],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",5],[6,"Output","",""],[6,"Output","",""],[11,"div","","",5],[6,"Output","",""],[6,"Output","",""],[11,"div","","",5],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",5],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",5],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",5],[6,"Output","",""],[11,"checked_add","","",5],[11,"checked_sub","","",5],[11,"checked_mul","","",5],[11,"checked_div","","",5],[11,"div_rem","","",5],[11,"div_floor","","",5],[11,"mod_floor","","",5],[11,"div_mod_floor","","",5],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5],[11,"to_i64","","",5],[11,"to_u64","","",5],[11,"from_i64","","",5],[11,"from_u64","","",5],[11,"to_biguint","","",6],[11,"to_biguint","","",5],[6,"Err","",""],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5],[11,"new","","Creates and initializes a `BigUint`.",5],[11,"from_slice","","Creates and initializes a `BigUint`.",5],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5],[11,"decode","","",0],[11,"encode","","",0],[11,"fmt","","",0],[11,"clone","","",0],[11,"cmp","","",0],[11,"partial_cmp","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"gt","","",0],[11,"ge","","",0],[11,"eq","","",0],[11,"ne","","",0],[6,"Output","",""],[11,"neg","","Negate Sign value.",0],[11,"fmt","","",6],[11,"decode","","",6],[11,"encode","","",6],[11,"clone","","",6],[11,"eq","","",6],[11,"partial_cmp","","",6],[11,"cmp","","",6],[11,"default","","",6],[11,"fmt","","",6],[11,"hash","","",6],[6,"Err","",""],[11,"from_str","","",6],[6,"Output","",""],[11,"shl","","",6],[6,"Output","",""],[6,"Output","",""],[11,"shr","","",6],[6,"Output","",""],[11,"zero","","",6],[11,"is_zero","","",6],[11,"one","","",6],[11,"abs","","",6],[11,"abs_sub","","",6],[11,"signum","","",6],[11,"is_positive","","",6],[11,"is_negative","","",6],[6,"Output","",""],[11,"add","","",6],[6,"Output","",""],[6,"Output","",""],[11,"add","","",6],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",6],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",6],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",6],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",6],[6,"Output","",""],[6,"Output","",""],[11,"div","","",6],[6,"Output","",""],[6,"Output","",""],[11,"div","","",6],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",6],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",6],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",6],[6,"Output","",""],[11,"checked_add","","",6],[11,"checked_sub","","",6],[11,"checked_mul","","",6],[11,"checked_div","","",6],[11,"div_rem","","",6],[11,"div_floor","","",6],[11,"mod_floor","","",6],[11,"div_mod_floor","","",6],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6],[11,"to_i64","","",6],[11,"to_u64","","",6],[11,"from_i64","","",6],[11,"from_u64","","",6],[11,"to_bigint","","",6],[11,"to_bigint","","",5],[6,"Err","",""],[11,"from_str_radix","","Creates and initializes a BigInt.",6],[11,"new","","Creates and initializes a BigInt.",6],[11,"from_biguint","","Creates and initializes a `BigInt`.",6],[11,"from_slice","","Creates and initializes a `BigInt`.",6],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6],[11,"checked_add","","",6],[11,"checked_sub","","",6],[11,"checked_mul","","",6],[11,"checked_div","","",6],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[11,"description","","",1],[11,"from_error","","",1],[0,"complex","num","Complex numbers."],[3,"Complex","num::complex","A complex number in Cartesian form."],[12,"re","","Real portion of the complex number",7],[12,"im","","Imaginary portion of the complex number",7],[6,"Complex32","",""],[6,"Complex64","",""],[11,"fmt","","",7],[11,"decode","","",7],[11,"encode","","",7],[11,"hash","","",7],[11,"clone","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"new","","Create a new Complex",7],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7],[11,"scale","","Multiplies `self` by the scalar `t`.",7],[11,"unscale","","Divides `self` by the scalar `t`.",7],[11,"inv","","Returns `1/self`",7],[11,"norm","","Calculate |self|",7],[11,"arg","","Calculate the principal Arg of self.",7],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7],[11,"from_polar","","Convert a polar representation into a complex number.",7],[6,"Output","",""],[11,"add","","",7],[6,"Output","",""],[6,"Output","",""],[11,"add","","",7],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",7],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",7],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",7],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",7],[6,"Output","",""],[6,"Output","",""],[11,"div","","",7],[6,"Output","",""],[6,"Output","",""],[11,"div","","",7],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",7],[6,"Output","",""],[11,"zero","","",7],[11,"is_zero","","",7],[11,"one","","",7],[11,"fmt","","",7],[0,"integer","num","Integer trait and functions."],[5,"div_rem","num::integer","Simultaneous integer division and modulus"],[5,"div_floor","","Floored integer division"],[5,"mod_floor","","Floored integer modulus"],[5,"div_mod_floor","","Simultaneous floored integer division and modulus"],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive."],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`."],[8,"Integer","",""],[10,"div_floor","","Floored integer division.",8],[10,"mod_floor","","Floored integer modulo, satisfying:",8],[10,"gcd","","Greatest Common Divisor (GCD).",8],[10,"lcm","","Lowest Common Multiple (LCM).",8],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8],[10,"is_even","","Returns `true` if the number is even.",8],[10,"is_odd","","Returns `true` if the number is odd.",8],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8],[0,"iter","num","External iterators for generic mathematics"],[3,"Range","num::iter","An iterator over the range [start, stop)"],[3,"RangeInclusive","","An iterator over the range [start, stop]"],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[5,"range_inclusive","","Return an iterator over the range [start, stop]"],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[11,"clone","","",9],[6,"Item","",""],[11,"next","","",9],[11,"size_hint","","",9],[11,"next_back","","",9],[11,"clone","","",10],[6,"Item","",""],[11,"next","","",10],[11,"size_hint","","",10],[11,"next_back","","",10],[11,"clone","","",11],[6,"Item","",""],[11,"next","","",11],[11,"clone","","",12],[6,"Item","",""],[11,"next","","",12],[0,"traits","num","Numeric traits for generic mathematics"],[8,"Num","num::traits","The base trait for numeric types"],[8,"Zero","","Defines an additive identity element for `Self`."],[10,"zero","","Returns the additive identity element of `Self`, `0`.",13],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",13],[8,"One","","Defines a multiplicative identity element for `Self`."],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",14],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative)."],[10,"abs","","Computes the absolute value.",15],[10,"abs_sub","","The positive difference of two numbers.",15],[10,"signum","","Returns the sign of the number.",15],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15],[8,"Unsigned","","A trait for values which cannot be negative"],[8,"Bounded","","Numbers which have upper and lower bounds"],[10,"min_value","","returns the smallest finite number this type can represent",16],[10,"max_value","","returns the largest finite number this type can represent",16],[8,"Saturating","","Saturating math operations"],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",17],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",17],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow."],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",18],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow."],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",19],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow."],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\nhappens, `None` is returned.",20],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow."],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that\nhappens, `None` is returned.",21],[0,"rational","num","Rational numbers"],[3,"Ratio","num::rational","Represents the ratio between 2 numbers."],[3,"ParseRatioError","",""],[6,"Rational","","Alias for a `Ratio` of machine-sized integers."],[6,"Rational32","",""],[6,"Rational64","",""],[6,"BigRational","","Alias for arbitrary precision rationals."],[11,"fmt","","",22],[11,"decode","","",22],[11,"encode","","",22],[11,"hash","","",22],[11,"clone","","",22],[11,"from_integer","","Creates a ratio representing the integer `t`.",22],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",22],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",22],[11,"to_integer","","Converts to an integer.",22],[11,"numer","","Gets an immutable reference to the numerator.",22],[11,"denom","","Gets an immutable reference to the denominator.",22],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",22],[11,"reduced","","Returns a `reduce`d copy of self.",22],[11,"recip","","Returns the reciprocal.",22],[11,"floor","","Rounds towards minus infinity.",22],[11,"ceil","","Rounds towards plus infinity.",22],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",22],[11,"trunc","","Rounds towards zero.",22],[11,"fract","","Returns the fractional part of a number.",22],[11,"from_float","","Converts a float into a rational number.",22],[11,"eq","","",22],[11,"ne","","",22],[11,"lt","","",22],[11,"gt","","",22],[11,"le","","",22],[11,"ge","","",22],[11,"partial_cmp","","",22],[11,"cmp","","",22],[6,"Output","",""],[11,"mul","","",22],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",22],[6,"Output","",""],[6,"Output","",""],[11,"div","","",22],[6,"Output","",""],[6,"Output","",""],[11,"div","","",22],[6,"Output","",""],[6,"Output","",""],[11,"add","","",22],[6,"Output","",""],[6,"Output","",""],[11,"add","","",22],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",22],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",22],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",22],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",22],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",22],[6,"Output","",""],[11,"zero","","",22],[11,"is_zero","","",22],[11,"one","","",22],[11,"abs","","",22],[11,"abs_sub","","",22],[11,"signum","","",22],[11,"is_positive","","",22],[11,"is_negative","","",22],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",22],[6,"Err","",""],[11,"from_str","","Parses `numer/denom` or just `numer`.",22],[6,"Err","",""],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",22],[11,"eq","","",23],[11,"ne","","",23],[11,"fmt","","",23],[11,"fmt","","",23],[11,"description","","",23]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[3,"Ratio"],[3,"ParseRatioError"]]};

searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::old_path::posix","",5],[11,"decode","","",5],[11,"encode","std::old_path::windows","",6],[11,"decode","","",6],[11,"encode","core::cell","",7],[11,"decode","","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","alloc::arc","",9],[11,"decode","","",9],[11,"encode","collections::dlist","",10],[11,"decode","","",10],[11,"encode","collections::ring_buf","",11],[11,"decode","","",11],[11,"encode","collections::btree::map","",12],[11,"decode","","",12],[11,"encode","collections::btree::set","",13],[11,"decode","","",13],[11,"encode","std::collections::hash::map","",14],[11,"decode","","",14],[11,"encode","std::collections::hash::set","",15],[11,"decode","","",15],[11,"encode","collections::vec_map","",16],[11,"decode","","",16],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[3,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[12,"char_set","","Character set to use",17],[12,"newline","","Newline to use",17],[12,"pad","","True to pad output with `=` characters",17],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17],[4,"CharacterSet","","Available encoding character sets"],[13,"Standard","","The standard character set (uses `+` and `/`)",18],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18],[4,"Newline","","Available newline types"],[13,"LF","","A linefeed (i.e. Unix-style newline)",19],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20],[13,"InvalidBase64Length","","The input had an invalid length",20],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[8,"ToBase64","","A trait for converting a value to base64 encoding."],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21],[8,"FromBase64","","A trait for converting from base64 encoded values."],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22],[11,"fmt","","",20],[11,"description","","",20],[11,"fmt","","",20],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[4,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",23],[13,"InvalidHexLength","","The input had an invalid length",23],[8,"ToHex","","A trait for converting a value to hexadecimal encoding"],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24],[8,"FromHex","","A trait for converting hexadecimal encoded values"],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25],[11,"fmt","","",23],[11,"description","","",23],[11,"fmt","","",23],[0,"json","rustc-serialize","JSON parsing and serialization"],[3,"PrettyJson","rustc-serialize::json",""],[3,"AsJson","",""],[3,"AsPrettyJson","",""],[3,"Encoder","","A structure for implementing serialization to JSON."],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[3,"Decoder","","A structure to decode JSON to values in rust."],[4,"Json","","Represents a json value"],[13,"I64","","",26],[13,"U64","","",26],[13,"F64","","",26],[13,"String","","",26],[13,"Boolean","","",26],[13,"Array","","",26],[13,"Object","","",26],[13,"Null","","",26],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[13,"InvalidSyntax","","",27],[13,"InvalidNumber","","",27],[13,"EOFWhileParsingObject","","",27],[13,"EOFWhileParsingArray","","",27],[13,"EOFWhileParsingValue","","",27],[13,"EOFWhileParsingString","","",27],[13,"KeyMustBeAString","","",27],[13,"ExpectedColon","","",27],[13,"TrailingCharacters","","",27],[13,"TrailingComma","","",27],[13,"InvalidEscape","","",27],[13,"InvalidUnicodeCodePoint","","",27],[13,"LoneLeadingSurrogateInHexEscape","","",27],[13,"UnexpectedEndOfHexEscape","","",27],[13,"UnrecognizedHex","","",27],[13,"NotFourDigit","","",27],[13,"NotUtf8","","",27],[4,"ParserError","",""],[13,"SyntaxError","","msg, line, col",28],[13,"IoError","","",28],[4,"DecoderError","",""],[13,"ParseError","","",29],[13,"ExpectedError","","",29],[13,"MissingFieldError","","",29],[13,"UnknownVariantError","","",29],[13,"ApplicationError","","",29],[4,"EncoderError","",""],[13,"FmtError","","",30],[13,"BadHashmapKey","","",30],[4,"JsonEvent","","The output of the streaming parser."],[13,"ObjectStart","","",31],[13,"ObjectEnd","","",31],[13,"ArrayStart","","",31],[13,"ArrayEnd","","",31],[13,"BooleanValue","","",31],[13,"I64Value","","",31],[13,"U64Value","","",31],[13,"F64Value","","",31],[13,"StringValue","","",31],[13,"NullValue","","",31],[13,"Error","","",31],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[13,"Index","","",32],[13,"Key","","",32],[5,"error_str","","Returns a readable error string for a given error code."],[5,"decode","","Shortcut function to decode a JSON `&str` into an object"],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[6,"Array","",""],[6,"Object","",""],[6,"BuilderError","",""],[6,"EncodeResult","",""],[6,"DecodeResult","",""],[8,"ToJson","","A trait for converting values to JSON"],[10,"to_json","","Converts the value of `self` to an instance of JSON",33],[11,"fmt","","",26],[11,"partial_cmp","","",26],[11,"lt","","",26],[11,"le","","",26],[11,"gt","","",26],[11,"ge","","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"fmt","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",30],[11,"fmt","","",27],[11,"description","","",29],[11,"cause","","",29],[11,"fmt","","",29],[11,"description","","",28],[11,"fmt","","",28],[11,"description","","",30],[11,"fmt","","",30],[11,"from_error","","",30],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",34],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",34],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34],[6,"Error","",""],[11,"emit_nil","","",34],[11,"emit_usize","","",34],[11,"emit_u64","","",34],[11,"emit_u32","","",34],[11,"emit_u16","","",34],[11,"emit_u8","","",34],[11,"emit_isize","","",34],[11,"emit_i64","","",34],[11,"emit_i32","","",34],[11,"emit_i16","","",34],[11,"emit_i8","","",34],[11,"emit_bool","","",34],[11,"emit_f64","","",34],[11,"emit_f32","","",34],[11,"emit_char","","",34],[11,"emit_str","","",34],[11,"emit_enum","","",34],[11,"emit_enum_variant","","",34],[11,"emit_enum_variant_arg","","",34],[11,"emit_enum_struct_variant","","",34],[11,"emit_enum_struct_variant_field","","",34],[11,"emit_struct","","",34],[11,"emit_struct_field","","",34],[11,"emit_tuple","","",34],[11,"emit_tuple_arg","","",34],[11,"emit_tuple_struct","","",34],[11,"emit_tuple_struct_arg","","",34],[11,"emit_option","","",34],[11,"emit_option_none","","",34],[11,"emit_option_some","","",34],[11,"emit_seq","","",34],[11,"emit_seq_elt","","",34],[11,"emit_map","","",34],[11,"emit_map_elt_key","","",34],[11,"emit_map_elt_val","","",34],[11,"encode","","",26],[11,"from_reader","","Decodes a json value from an `&mut old_io::Reader`",26],[11,"from_str","","Decodes a json value from a string",26],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",26],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26],[6,"Output","",""],[11,"index","","",26],[6,"Output","",""],[11,"index","","",26],[11,"fmt","","",31],[11,"clone","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"fmt","","",32],[11,"clone","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"new","","",35],[11,"len","","Returns The number of elements in the Stack.",35],[11,"is_empty","","Returns true if the stack is empty.",35],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35],[11,"is_equal_to","","Compares this stack with an array of StackElements.",35],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35],[11,"top","","Returns the top-most element (if any).",35],[6,"Item","",""],[11,"next","","",36],[11,"new","","Creates the JSON parser.",36],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36],[11,"new","","Create a JSON Builder.",37],[11,"build","","",37],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",38],[6,"Error","",""],[11,"read_nil","","",38],[11,"read_usize","","",38],[11,"read_u8","","",38],[11,"read_u16","","",38],[11,"read_u32","","",38],[11,"read_u64","","",38],[11,"read_isize","","",38],[11,"read_i8","","",38],[11,"read_i16","","",38],[11,"read_i32","","",38],[11,"read_i64","","",38],[11,"read_f32","","",38],[11,"read_f64","","",38],[11,"read_bool","","",38],[11,"read_char","","",38],[11,"read_str","","",38],[11,"read_enum","","",38],[11,"read_enum_variant","","",38],[11,"read_enum_variant_arg","","",38],[11,"read_enum_struct_variant","","",38],[11,"read_enum_struct_variant_field","","",38],[11,"read_struct","","",38],[11,"read_struct_field","","",38],[11,"read_tuple","","",38],[11,"read_tuple_arg","","",38],[11,"read_tuple_struct","","",38],[11,"read_tuple_struct_arg","","",38],[11,"read_option","","",38],[11,"read_seq","","",38],[11,"read_seq_elt","","",38],[11,"read_map","","",38],[11,"read_map_elt_key","","",38],[11,"read_map_elt_val","","",38],[11,"error","","",38],[11,"to_json","","",26],[11,"to_json","collections::string","",0],[11,"to_json","collections::vec","",3],[11,"to_json","collections::btree::map","",12],[11,"to_json","std::collections::hash::map","",14],[11,"to_json","core::option","",4],[11,"fmt","rustc-serialize::json","Encodes a json value into a string",26],[11,"fmt","","Encodes a json value into a string",39],[11,"fmt","","Encodes a json value into a string",40],[11,"indent","","Set the indentation level for the emitted JSON",41],[11,"fmt","","Encodes a json value into a string",41],[6,"Err","",""],[11,"from_str","","",26],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::old_path::posix","",5],[11,"decode","","",5],[11,"encode","std::old_path::windows","",6],[11,"decode","","",6],[11,"encode","core::cell","",7],[11,"decode","","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","alloc::arc","",9],[11,"decode","","",9],[8,"Decoder","rustc-serialize",""],[16,"Error","rustc-serialize::Decoder",""],[10,"read_nil","rustc-serialize","",42],[10,"read_usize","","",42],[10,"read_u64","","",42],[10,"read_u32","","",42],[10,"read_u16","","",42],[10,"read_u8","","",42],[10,"read_isize","","",42],[10,"read_i64","","",42],[10,"read_i32","","",42],[10,"read_i16","","",42],[10,"read_i8","","",42],[10,"read_bool","","",42],[10,"read_f64","","",42],[10,"read_f32","","",42],[10,"read_char","","",42],[10,"read_str","","",42],[10,"read_enum","","",42],[10,"read_enum_variant","","",42],[10,"read_enum_variant_arg","","",42],[10,"read_enum_struct_variant","","",42],[10,"read_enum_struct_variant_field","","",42],[10,"read_struct","","",42],[10,"read_struct_field","","",42],[10,"read_tuple","","",42],[10,"read_tuple_arg","","",42],[10,"read_tuple_struct","","",42],[10,"read_tuple_struct_arg","","",42],[10,"read_option","","",42],[10,"read_seq","","",42],[10,"read_seq_elt","","",42],[10,"read_map","","",42],[10,"read_map_elt_key","","",42],[10,"read_map_elt_val","","",42],[10,"error","","",42],[8,"Encoder","",""],[16,"Error","rustc-serialize::Encoder",""],[10,"emit_nil","rustc-serialize","",43],[10,"emit_usize","","",43],[10,"emit_u64","","",43],[10,"emit_u32","","",43],[10,"emit_u16","","",43],[10,"emit_u8","","",43],[10,"emit_isize","","",43],[10,"emit_i64","","",43],[10,"emit_i32","","",43],[10,"emit_i16","","",43],[10,"emit_i8","","",43],[10,"emit_bool","","",43],[10,"emit_f64","","",43],[10,"emit_f32","","",43],[10,"emit_char","","",43],[10,"emit_str","","",43],[10,"emit_enum","","",43],[10,"emit_enum_variant","","",43],[10,"emit_enum_variant_arg","","",43],[10,"emit_enum_struct_variant","","",43],[10,"emit_enum_struct_variant_field","","",43],[10,"emit_struct","","",43],[10,"emit_struct_field","","",43],[10,"emit_tuple","","",43],[10,"emit_tuple_arg","","",43],[10,"emit_tuple_struct","","",43],[10,"emit_tuple_struct_arg","","",43],[10,"emit_option","","",43],[10,"emit_option_none","","",43],[10,"emit_option_some","","",43],[10,"emit_seq","","",43],[10,"emit_seq_elt","","",43],[10,"emit_map","","",43],[10,"emit_map_elt_key","","",43],[10,"emit_map_elt_val","","",43],[8,"Decodable","",""],[10,"decode","","",44],[8,"Encodable","",""],[10,"encode","","",45],[8,"DecoderHelpers","",""],[10,"read_to_vec","","",46],[8,"EncoderHelpers","",""],[10,"emit_from_vec","","",47]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"Path"],[3,"Path"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"DList"],[3,"RingBuf"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"VecMap"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};

searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation"],[3,"OsRng","","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:"],[3,"Generator","","Iterator which will generate a stream of random items."],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters."],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator."],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform."],[3,"ThreadRng","","The thread-local RNG."],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed."],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<int>()`."],[5,"random","","Generates a random value using the thread-local random number generator."],[5,"sample","","Randomly sample up to `amount` elements from an iterator."],[0,"distributions","","Sampling from random distributions."],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`."],[12,"weight","","The numerical weight of this item",0],[12,"item","","The actual item which is being weighted",0],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items."],[0,"range","","Generating numbers between two others."],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds."],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2],[11,"sample","","",2],[11,"ind_sample","","",2],[0,"gamma","rand::distributions","The Gamma and derived distributions."],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3],[11,"sample","","",3],[11,"ind_sample","","",3],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4],[11,"sample","","",4],[11,"ind_sample","","",4],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5],[11,"sample","","",5],[11,"ind_sample","","",5],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6],[11,"sample","","",6],[11,"ind_sample","","",6],[0,"normal","rand::distributions","The normal and derived distributions."],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[11,"rand","","",7],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8],[11,"sample","","",8],[11,"ind_sample","","",8],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9],[11,"sample","","",9],[11,"ind_sample","","",9],[0,"exponential","rand::distributions","The exponential distribution."],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[11,"rand","","",10],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11],[11,"sample","","",11],[11,"ind_sample","","",11],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`."],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12],[8,"IndependentSample","","`Sample`s that do not require keeping track of state."],[10,"ind_sample","","Generate a random value.",13],[11,"sample","","",14],[11,"ind_sample","","",14],[11,"new","","Create a new `WeightedChoice`.",15],[11,"sample","","",15],[11,"ind_sample","","",15],[0,"isaac","rand","The ISAAC random number generator."],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1]."],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm."],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16],[11,"clone","","",16],[11,"next_u32","","",16],[11,"reseed","","",16],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16],[11,"rand","","",16],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17],[11,"clone","","",17],[11,"next_u32","","",17],[11,"next_u64","","",17],[11,"reseed","","",17],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17],[11,"rand","","",17],[0,"chacha","rand","The ChaCha random number generator."],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1]."],[11,"clone","","",18],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18],[11,"next_u32","","",18],[11,"reseed","","",18],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18],[11,"rand","","",18],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`."],[10,"reseed","","Reseed the given RNG.",20],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19],[11,"next_u32","","",19],[11,"next_u64","","",19],[11,"fill_bytes","","",19],[11,"reseed","","",19],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19],[11,"reseed","","",21],[11,"default","","",21],[11,"rand","rand","",22],[11,"rand","","",23],[11,"rand","","",22],[11,"rand","","",23],[11,"rand","core::option","",24],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators."],[11,"new","","Create a new `OsRng`.",25],[11,"next_u32","","",25],[11,"next_u64","","",25],[11,"fill_bytes","","",25],[0,"reader","","A wrapper around any Reader to treat it as an RNG."],[3,"ReaderRng","rand::reader","An RNG that reads random bytes straight from a `Reader`. This will\nwork best with an infinite reader, but this is not required."],[11,"new","","Create a new `ReaderRng` from a `Reader`.",26],[11,"next_u32","","",26],[11,"next_u64","","",26],[11,"fill_bytes","","",26],[8,"Rand","rand","A type that can be randomly generated using an `Rng`."],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27],[8,"Rng","","A random number generator."],[10,"next_u32","","Return the next random u32.",28],[11,"next_u64","","Return the next random u64.",28],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28],[11,"fill_bytes","","Fill `dest` with random data.",28],[11,"gen","","Return a random value of a `Rand` type.",28],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28],[11,"choose","","Return a random element from `values`.",28],[11,"shuffle","","Shuffle a mutable slice in place.",28],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."],[10,"reseed","","Reseed an RNG with the given seed.",29],[10,"from_seed","","Create a new RNG with the given seed.",29],[6,"Item","",""],[11,"next","","",30],[6,"Item","",""],[11,"next","","",31],[11,"clone","","",32],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",32],[11,"next_u32","","",32],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",32],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",32],[11,"rand","","",32],[11,"clone","","",33],[11,"new","","Create a randomly seeded instance of `StdRng`.",33],[11,"next_u32","","",33],[11,"next_u64","","",33],[11,"reseed","","",33],[11,"from_seed","","",33],[11,"clone","","",34],[11,"next_u32","","",34],[11,"next_u64","","",34],[11,"fill_bytes","","",34]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReaderRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};

searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade."],[3,"LogRecord","","The \"payload\" of a log message."],[3,"LogLocation","","The location of a log message."],[12,"module_path","","The module path of the message.",0],[12,"file","","The source file containing the message.",0],[12,"line","","The line containing the message.",0],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter."],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called."],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework"],[13,"Error","","The \"error\" level.",1],[13,"Warn","","The \"warn\" level.",1],[13,"Info","","The \"info\" level.",1],[13,"Debug","","The \"debug\" level.",1],[13,"Trace","","The \"trace\" level.",1],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework."],[13,"Off","","A level lower than all log levels.",2],[13,"Error","","Corresponds to the `Error` log level.",2],[13,"Warn","","Corresponds to the `Warn` log level.",2],[13,"Info","","Corresponds to the `Trace` log level.",2],[13,"Debug","","Corresponds to the `Debug` log level.",2],[13,"Trace","","Corresponds to the `Trace` log level.",2],[5,"max_log_level","","Returns the current maximum log level."],[5,"set_logger","","Sets the global logger."],[5,"enabled","","Determines if the current logger will ignore a log message at the specified\nlevel from the specified module."],[5,"log","","Logs a message."],[8,"Log","","A trait encapsulating the operations required of a logger"],[10,"enabled","","Determines if a log message sent at the specified level from the\nspecified module would be logged.",3],[10,"log","","Logs the `LogRecord`.",3],[11,"fmt","","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"eq","","",1],[11,"partial_cmp","","",1],[11,"partial_cmp","","",1],[11,"cmp","","",1],[6,"Err","",""],[11,"from_str","","",1],[11,"fmt","","",1],[11,"max","","Returns the most verbose logging level.",1],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",1],[11,"fmt","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"eq","","",2],[11,"partial_cmp","","",2],[11,"partial_cmp","","",2],[11,"cmp","","",2],[6,"Err","",""],[11,"from_str","","",2],[11,"fmt","","",2],[11,"max","","Returns the most verbose logging level filter.",2],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",2],[11,"new","","Creates a new `LogRecord`.",4],[11,"args","","The message body.",4],[11,"location","","The location of the log directive.",4],[11,"level","","The verbosity level of the message.",4],[11,"fmt","","",0],[11,"clone","","",0],[11,"fmt","","",5],[11,"get","","Gets the current maximum log level filter.",5],[11,"set","","Sets the maximum log level.",5],[11,"fmt","","",6],[11,"fmt","","",6],[14,"log!","","The standard logging macro."],[14,"error!","","Logs a message at the error level."],[14,"warn!","","Logs a message at the warn level."],[14,"info!","","Logs a message at the info level."],[14,"debug!","","Logs a message at the debug level."],[14,"trace!","","Logs a message at the trace level."],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged."]],"paths":[[3,"LogLocation"],[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"]]};

searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries"],[0,"types","",""],[0,"common","libc::types",""],[0,"c95","libc::types::common",""],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C."],[13,"__variant1","","",0],[13,"__variant2","","",0],[4,"FILE","",""],[4,"fpos_t","",""],[0,"c99","libc::types::common",""],[6,"int8_t","libc::types::common::c99",""],[6,"int16_t","",""],[6,"int32_t","",""],[6,"int64_t","",""],[6,"uint8_t","",""],[6,"uint16_t","",""],[6,"uint32_t","",""],[6,"uint64_t","",""],[0,"posix88","libc::types::common",""],[4,"DIR","libc::types::common::posix88",""],[4,"dirent_t","",""],[0,"os","libc::types",""],[0,"common","libc::types::os",""],[0,"posix01","libc::types::os::common",""],[3,"glob_t","libc::types::os::common::posix01",""],[12,"gl_pathc","","",1],[12,"gl_pathv","","",1],[12,"gl_offs","","",1],[12,"__unused1","","",1],[12,"__unused2","","",1],[12,"__unused3","","",1],[12,"__unused4","","",1],[12,"__unused5","","",1],[3,"timeval","",""],[12,"tv_sec","","",2],[12,"tv_usec","","",2],[3,"timespec","",""],[12,"tv_sec","","",3],[12,"tv_nsec","","",3],[4,"timezone","",""],[6,"pthread_t","",""],[6,"sighandler_t","",""],[0,"bsd44","libc::types::os::common",""],[3,"sockaddr","libc::types::os::common::bsd44",""],[12,"sa_family","","",4],[12,"sa_data","","",4],[3,"sockaddr_storage","",""],[12,"ss_family","","",5],[12,"__ss_align","","",5],[12,"__ss_pad2","","",5],[3,"sockaddr_in","",""],[12,"sin_family","","",6],[12,"sin_port","","",6],[12,"sin_addr","","",6],[12,"sin_zero","","",6],[3,"in_addr","",""],[12,"s_addr","","",7],[3,"sockaddr_in6","",""],[12,"sin6_family","","",8],[12,"sin6_port","","",8],[12,"sin6_flowinfo","","",8],[12,"sin6_addr","","",8],[12,"sin6_scope_id","","",8],[3,"in6_addr","",""],[12,"s6_addr","","",9],[3,"ip_mreq","",""],[12,"imr_multiaddr","","",10],[12,"imr_interface","","",10],[3,"ip6_mreq","",""],[12,"ipv6mr_multiaddr","","",11],[12,"ipv6mr_interface","","",11],[3,"addrinfo","",""],[12,"ai_flags","","",12],[12,"ai_family","","",12],[12,"ai_socktype","","",12],[12,"ai_protocol","","",12],[12,"ai_addrlen","","",12],[12,"ai_addr","","",12],[12,"ai_canonname","","",12],[12,"ai_next","","",12],[3,"sockaddr_un","",""],[12,"sun_family","","",13],[12,"sun_path","","",13],[3,"ifaddrs","",""],[12,"ifa_next","","",14],[12,"ifa_name","","",14],[12,"ifa_flags","","",14],[12,"ifa_addr","","",14],[12,"ifa_netmask","","",14],[12,"ifa_ifu","","",14],[12,"ifa_data","","",14],[6,"socklen_t","",""],[6,"sa_family_t","",""],[6,"in_port_t","",""],[6,"in_addr_t","",""],[0,"arch","libc::types::os",""],[0,"c95","libc::types::os::arch",""],[6,"c_char","libc::types::os::arch::c95",""],[6,"c_schar","",""],[6,"c_uchar","",""],[6,"c_short","",""],[6,"c_ushort","",""],[6,"c_int","",""],[6,"c_uint","",""],[6,"c_long","",""],[6,"c_ulong","",""],[6,"c_float","",""],[6,"c_double","",""],[6,"size_t","",""],[6,"ptrdiff_t","",""],[6,"clock_t","",""],[6,"time_t","",""],[6,"suseconds_t","",""],[6,"wchar_t","",""],[0,"c99","libc::types::os::arch",""],[6,"c_longlong","libc::types::os::arch::c99",""],[6,"c_ulonglong","",""],[6,"intptr_t","",""],[6,"uintptr_t","",""],[6,"intmax_t","",""],[6,"uintmax_t","",""],[0,"posix88","libc::types::os::arch",""],[6,"off_t","libc::types::os::arch::posix88",""],[6,"dev_t","",""],[6,"ino_t","",""],[6,"pid_t","",""],[6,"uid_t","",""],[6,"gid_t","",""],[6,"useconds_t","",""],[6,"mode_t","",""],[6,"ssize_t","",""],[0,"posix01","libc::types::os::arch",""],[3,"stat","libc::types::os::arch::posix01",""],[12,"st_dev","","",15],[12,"st_ino","","",15],[12,"st_nlink","","",15],[12,"st_mode","","",15],[12,"st_uid","","",15],[12,"st_gid","","",15],[12,"__pad0","","",15],[12,"st_rdev","","",15],[12,"st_size","","",15],[12,"st_blksize","","",15],[12,"st_blocks","","",15],[12,"st_atime","","",15],[12,"st_atime_nsec","","",15],[12,"st_mtime","","",15],[12,"st_mtime_nsec","","",15],[12,"st_ctime","","",15],[12,"st_ctime_nsec","","",15],[12,"__unused","","",15],[3,"utimbuf","",""],[12,"actime","","",16],[12,"modtime","","",16],[3,"pthread_attr_t","",""],[12,"__size","","",17],[6,"nlink_t","",""],[6,"blksize_t","",""],[6,"blkcnt_t","",""],[0,"extra","libc::types::os::arch",""],[3,"sockaddr_ll","libc::types::os::arch::extra",""],[12,"sll_family","","",18],[12,"sll_protocol","","",18],[12,"sll_ifindex","","",18],[12,"sll_hatype","","",18],[12,"sll_pkttype","","",18],[12,"sll_halen","","",18],[12,"sll_addr","","",18],[0,"consts","libc",""],[0,"os","libc::consts",""],[0,"c95","libc::consts::os",""],[17,"EXIT_FAILURE","libc::consts::os::c95",""],[17,"EXIT_SUCCESS","",""],[17,"RAND_MAX","",""],[17,"EOF","",""],[17,"SEEK_SET","",""],[17,"SEEK_CUR","",""],[17,"SEEK_END","",""],[17,"_IOFBF","",""],[17,"_IONBF","",""],[17,"_IOLBF","",""],[17,"BUFSIZ","",""],[17,"FOPEN_MAX","",""],[17,"FILENAME_MAX","",""],[17,"L_tmpnam","",""],[17,"TMP_MAX","",""],[0,"posix88","libc::consts::os",""],[17,"O_RDONLY","libc::consts::os::posix88",""],[17,"O_WRONLY","",""],[17,"O_RDWR","",""],[17,"O_APPEND","",""],[17,"O_CREAT","",""],[17,"O_EXCL","",""],[17,"O_TRUNC","",""],[17,"S_IFIFO","",""],[17,"S_IFCHR","",""],[17,"S_IFBLK","",""],[17,"S_IFDIR","",""],[17,"S_IFREG","",""],[17,"S_IFLNK","",""],[17,"S_IFMT","",""],[17,"S_IEXEC","",""],[17,"S_IWRITE","",""],[17,"S_IREAD","",""],[17,"S_IRWXU","",""],[17,"S_IXUSR","",""],[17,"S_IWUSR","",""],[17,"S_IRUSR","",""],[17,"F_OK","",""],[17,"R_OK","",""],[17,"W_OK","",""],[17,"X_OK","",""],[17,"STDIN_FILENO","",""],[17,"STDOUT_FILENO","",""],[17,"STDERR_FILENO","",""],[17,"F_LOCK","",""],[17,"F_TEST","",""],[17,"F_TLOCK","",""],[17,"F_ULOCK","",""],[17,"SIGHUP","",""],[17,"SIGINT","",""],[17,"SIGQUIT","",""],[17,"SIGILL","",""],[17,"SIGABRT","",""],[17,"SIGFPE","",""],[17,"SIGKILL","",""],[17,"SIGSEGV","",""],[17,"SIGPIPE","",""],[17,"SIGALRM","",""],[17,"SIGTERM","",""],[17,"PROT_NONE","",""],[17,"PROT_READ","",""],[17,"PROT_WRITE","",""],[17,"PROT_EXEC","",""],[17,"MAP_FILE","",""],[17,"MAP_SHARED","",""],[17,"MAP_PRIVATE","",""],[17,"MAP_FIXED","",""],[17,"MAP_ANON","",""],[17,"MAP_FAILED","",""],[17,"MCL_CURRENT","",""],[17,"MCL_FUTURE","",""],[17,"MS_ASYNC","",""],[17,"MS_INVALIDATE","",""],[17,"MS_SYNC","",""],[17,"EPERM","",""],[17,"ENOENT","",""],[17,"ESRCH","",""],[17,"EINTR","",""],[17,"EIO","",""],[17,"ENXIO","",""],[17,"E2BIG","",""],[17,"ENOEXEC","",""],[17,"EBADF","",""],[17,"ECHILD","",""],[17,"EAGAIN","",""],[17,"ENOMEM","",""],[17,"EACCES","",""],[17,"EFAULT","",""],[17,"ENOTBLK","",""],[17,"EBUSY","",""],[17,"EEXIST","",""],[17,"EXDEV","",""],[17,"ENODEV","",""],[17,"ENOTDIR","",""],[17,"EISDIR","",""],[17,"EINVAL","",""],[17,"ENFILE","",""],[17,"EMFILE","",""],[17,"ENOTTY","",""],[17,"ETXTBSY","",""],[17,"EFBIG","",""],[17,"ENOSPC","",""],[17,"ESPIPE","",""],[17,"EROFS","",""],[17,"EMLINK","",""],[17,"EPIPE","",""],[17,"EDOM","",""],[17,"ERANGE","",""],[17,"EDEADLK","",""],[17,"ENAMETOOLONG","",""],[17,"ENOLCK","",""],[17,"ENOSYS","",""],[17,"ENOTEMPTY","",""],[17,"ELOOP","",""],[17,"EWOULDBLOCK","",""],[17,"ENOMSG","",""],[17,"EIDRM","",""],[17,"ECHRNG","",""],[17,"EL2NSYNC","",""],[17,"EL3HLT","",""],[17,"EL3RST","",""],[17,"ELNRNG","",""],[17,"EUNATCH","",""],[17,"ENOCSI","",""],[17,"EL2HLT","",""],[17,"EBADE","",""],[17,"EBADR","",""],[17,"EXFULL","",""],[17,"ENOANO","",""],[17,"EBADRQC","",""],[17,"EBADSLT","",""],[17,"EDEADLOCK","",""],[17,"EBFONT","",""],[17,"ENOSTR","",""],[17,"ENODATA","",""],[17,"ETIME","",""],[17,"ENOSR","",""],[17,"ENONET","",""],[17,"ENOPKG","",""],[17,"EREMOTE","",""],[17,"ENOLINK","",""],[17,"EADV","",""],[17,"ESRMNT","",""],[17,"ECOMM","",""],[17,"EPROTO","",""],[17,"EMULTIHOP","",""],[17,"EDOTDOT","",""],[17,"EBADMSG","",""],[17,"EOVERFLOW","",""],[17,"ENOTUNIQ","",""],[17,"EBADFD","",""],[17,"EREMCHG","",""],[17,"ELIBACC","",""],[17,"ELIBBAD","",""],[17,"ELIBSCN","",""],[17,"ELIBMAX","",""],[17,"ELIBEXEC","",""],[17,"EILSEQ","",""],[17,"ERESTART","",""],[17,"ESTRPIPE","",""],[17,"EUSERS","",""],[17,"ENOTSOCK","",""],[17,"EDESTADDRREQ","",""],[17,"EMSGSIZE","",""],[17,"EPROTOTYPE","",""],[17,"ENOPROTOOPT","",""],[17,"EPROTONOSUPPORT","",""],[17,"ESOCKTNOSUPPORT","",""],[17,"EOPNOTSUPP","",""],[17,"EPFNOSUPPORT","",""],[17,"EAFNOSUPPORT","",""],[17,"EADDRINUSE","",""],[17,"EADDRNOTAVAIL","",""],[17,"ENETDOWN","",""],[17,"ENETUNREACH","",""],[17,"ENETRESET","",""],[17,"ECONNABORTED","",""],[17,"ECONNRESET","",""],[17,"ENOBUFS","",""],[17,"EISCONN","",""],[17,"ENOTCONN","",""],[17,"ESHUTDOWN","",""],[17,"ETOOMANYREFS","",""],[17,"ETIMEDOUT","",""],[17,"ECONNREFUSED","",""],[17,"EHOSTDOWN","",""],[17,"EHOSTUNREACH","",""],[17,"EALREADY","",""],[17,"EINPROGRESS","",""],[17,"ESTALE","",""],[17,"EUCLEAN","",""],[17,"ENOTNAM","",""],[17,"ENAVAIL","",""],[17,"EISNAM","",""],[17,"EREMOTEIO","",""],[17,"EDQUOT","",""],[17,"ENOMEDIUM","",""],[17,"EMEDIUMTYPE","",""],[17,"ECANCELED","",""],[17,"ENOKEY","",""],[17,"EKEYEXPIRED","",""],[17,"EKEYREVOKED","",""],[17,"EKEYREJECTED","",""],[17,"EOWNERDEAD","",""],[17,"ENOTRECOVERABLE","",""],[17,"ERFKILL","",""],[17,"EHWPOISON","",""],[0,"posix01","libc::consts::os",""],[17,"F_DUPFD","libc::consts::os::posix01",""],[17,"F_GETFD","",""],[17,"F_SETFD","",""],[17,"F_GETFL","",""],[17,"F_SETFL","",""],[17,"SIGTRAP","",""],[17,"SIGPIPE","",""],[17,"SIG_IGN","",""],[17,"GLOB_ERR","",""],[17,"GLOB_MARK","",""],[17,"GLOB_NOSORT","",""],[17,"GLOB_DOOFFS","",""],[17,"GLOB_NOCHECK","",""],[17,"GLOB_APPEND","",""],[17,"GLOB_NOESCAPE","",""],[17,"GLOB_NOSPACE","",""],[17,"GLOB_ABORTED","",""],[17,"GLOB_NOMATCH","",""],[17,"POSIX_MADV_NORMAL","",""],[17,"POSIX_MADV_RANDOM","",""],[17,"POSIX_MADV_SEQUENTIAL","",""],[17,"POSIX_MADV_WILLNEED","",""],[17,"POSIX_MADV_DONTNEED","",""],[17,"_SC_MQ_PRIO_MAX","",""],[17,"_SC_IOV_MAX","",""],[17,"_SC_GETGR_R_SIZE_MAX","",""],[17,"_SC_GETPW_R_SIZE_MAX","",""],[17,"_SC_LOGIN_NAME_MAX","",""],[17,"_SC_TTY_NAME_MAX","",""],[17,"_SC_THREADS","",""],[17,"_SC_THREAD_SAFE_FUNCTIONS","",""],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","",""],[17,"_SC_THREAD_KEYS_MAX","",""],[17,"_SC_THREAD_STACK_MIN","",""],[17,"_SC_THREAD_THREADS_MAX","",""],[17,"_SC_THREAD_ATTR_STACKADDR","",""],[17,"_SC_THREAD_ATTR_STACKSIZE","",""],[17,"_SC_THREAD_PRIORITY_SCHEDULING","",""],[17,"_SC_THREAD_PRIO_INHERIT","",""],[17,"_SC_THREAD_PRIO_PROTECT","",""],[17,"_SC_THREAD_PROCESS_SHARED","",""],[17,"_SC_ATEXIT_MAX","",""],[17,"_SC_XOPEN_VERSION","",""],[17,"_SC_XOPEN_XCU_VERSION","",""],[17,"_SC_XOPEN_UNIX","",""],[17,"_SC_XOPEN_CRYPT","",""],[17,"_SC_XOPEN_ENH_I18N","",""],[17,"_SC_XOPEN_SHM","",""],[17,"_SC_XOPEN_LEGACY","",""],[17,"_SC_XOPEN_REALTIME","",""],[17,"_SC_XOPEN_REALTIME_THREADS","",""],[17,"PTHREAD_CREATE_JOINABLE","",""],[17,"PTHREAD_CREATE_DETACHED","",""],[17,"PTHREAD_STACK_MIN","",""],[17,"CLOCK_REALTIME","",""],[17,"CLOCK_MONOTONIC","",""],[0,"bsd44","libc::consts::os",""],[17,"MADV_NORMAL","libc::consts::os::bsd44",""],[17,"MADV_RANDOM","",""],[17,"MADV_SEQUENTIAL","",""],[17,"MADV_WILLNEED","",""],[17,"MADV_DONTNEED","",""],[17,"MADV_REMOVE","",""],[17,"MADV_DONTFORK","",""],[17,"MADV_DOFORK","",""],[17,"MADV_MERGEABLE","",""],[17,"MADV_UNMERGEABLE","",""],[17,"MADV_HWPOISON","",""],[17,"IFF_LOOPBACK","",""],[17,"AF_UNIX","",""],[17,"AF_INET","",""],[17,"AF_INET6","",""],[17,"SOCK_STREAM","",""],[17,"SOCK_DGRAM","",""],[17,"SOCK_RAW","",""],[17,"IPPROTO_TCP","",""],[17,"IPPROTO_IP","",""],[17,"IPPROTO_IPV6","",""],[17,"IP_MULTICAST_TTL","",""],[17,"IP_MULTICAST_LOOP","",""],[17,"IP_TTL","",""],[17,"IP_HDRINCL","",""],[17,"IP_ADD_MEMBERSHIP","",""],[17,"IP_DROP_MEMBERSHIP","",""],[17,"IPV6_ADD_MEMBERSHIP","",""],[17,"IPV6_DROP_MEMBERSHIP","",""],[17,"TCP_NODELAY","",""],[17,"SOL_SOCKET","",""],[17,"SO_KEEPALIVE","",""],[17,"SO_BROADCAST","",""],[17,"SO_REUSEADDR","",""],[17,"SO_ERROR","",""],[17,"SHUT_RD","",""],[17,"SHUT_WR","",""],[17,"SHUT_RDWR","",""],[0,"extra","libc::consts::os",""],[17,"AF_PACKET","libc::consts::os::extra",""],[17,"IPPROTO_RAW","",""],[17,"O_RSYNC","",""],[17,"O_DSYNC","",""],[17,"O_NONBLOCK","",""],[17,"O_SYNC","",""],[17,"PROT_GROWSDOWN","",""],[17,"PROT_GROWSUP","",""],[17,"MAP_TYPE","",""],[17,"MAP_ANONYMOUS","",""],[17,"MAP_32BIT","",""],[17,"MAP_GROWSDOWN","",""],[17,"MAP_DENYWRITE","",""],[17,"MAP_EXECUTABLE","",""],[17,"MAP_LOCKED","",""],[17,"MAP_NONRESERVE","",""],[17,"MAP_POPULATE","",""],[17,"MAP_NONBLOCK","",""],[17,"MAP_STACK","",""],[0,"sysconf","libc::consts::os",""],[17,"_SC_ARG_MAX","libc::consts::os::sysconf",""],[17,"_SC_CHILD_MAX","",""],[17,"_SC_CLK_TCK","",""],[17,"_SC_NGROUPS_MAX","",""],[17,"_SC_OPEN_MAX","",""],[17,"_SC_STREAM_MAX","",""],[17,"_SC_TZNAME_MAX","",""],[17,"_SC_JOB_CONTROL","",""],[17,"_SC_SAVED_IDS","",""],[17,"_SC_REALTIME_SIGNALS","",""],[17,"_SC_PRIORITY_SCHEDULING","",""],[17,"_SC_TIMERS","",""],[17,"_SC_ASYNCHRONOUS_IO","",""],[17,"_SC_PRIORITIZED_IO","",""],[17,"_SC_SYNCHRONIZED_IO","",""],[17,"_SC_FSYNC","",""],[17,"_SC_MAPPED_FILES","",""],[17,"_SC_MEMLOCK","",""],[17,"_SC_MEMLOCK_RANGE","",""],[17,"_SC_MEMORY_PROTECTION","",""],[17,"_SC_MESSAGE_PASSING","",""],[17,"_SC_SEMAPHORES","",""],[17,"_SC_SHARED_MEMORY_OBJECTS","",""],[17,"_SC_AIO_LISTIO_MAX","",""],[17,"_SC_AIO_MAX","",""],[17,"_SC_AIO_PRIO_DELTA_MAX","",""],[17,"_SC_DELAYTIMER_MAX","",""],[17,"_SC_MQ_OPEN_MAX","",""],[17,"_SC_VERSION","",""],[17,"_SC_PAGESIZE","",""],[17,"_SC_RTSIG_MAX","",""],[17,"_SC_SEM_NSEMS_MAX","",""],[17,"_SC_SEM_VALUE_MAX","",""],[17,"_SC_SIGQUEUE_MAX","",""],[17,"_SC_TIMER_MAX","",""],[17,"_SC_BC_BASE_MAX","",""],[17,"_SC_BC_DIM_MAX","",""],[17,"_SC_BC_SCALE_MAX","",""],[17,"_SC_BC_STRING_MAX","",""],[17,"_SC_COLL_WEIGHTS_MAX","",""],[17,"_SC_EXPR_NEST_MAX","",""],[17,"_SC_LINE_MAX","",""],[17,"_SC_RE_DUP_MAX","",""],[17,"_SC_2_VERSION","",""],[17,"_SC_2_C_BIND","",""],[17,"_SC_2_C_DEV","",""],[17,"_SC_2_FORT_DEV","",""],[17,"_SC_2_FORT_RUN","",""],[17,"_SC_2_SW_DEV","",""],[17,"_SC_2_LOCALEDEF","",""],[17,"_SC_2_CHAR_TERM","",""],[17,"_SC_2_C_VERSION","",""],[17,"_SC_2_UPE","",""],[17,"_SC_XBS5_ILP32_OFF32","",""],[17,"_SC_XBS5_ILP32_OFFBIG","",""],[17,"_SC_XBS5_LPBIG_OFFBIG","",""],[0,"funcs","libc",""],[0,"c95","libc::funcs",""],[0,"ctype","libc::funcs::c95",""],[5,"isalnum","libc::funcs::c95::ctype",""],[5,"isalpha","",""],[5,"iscntrl","",""],[5,"isdigit","",""],[5,"isgraph","",""],[5,"islower","",""],[5,"isprint","",""],[5,"ispunct","",""],[5,"isspace","",""],[5,"isupper","",""],[5,"isxdigit","",""],[5,"tolower","",""],[5,"toupper","",""],[0,"stdio","libc::funcs::c95",""],[5,"fopen","libc::funcs::c95::stdio",""],[5,"freopen","",""],[5,"fflush","",""],[5,"fclose","",""],[5,"remove","",""],[5,"rename","",""],[5,"tmpfile","",""],[5,"setvbuf","",""],[5,"setbuf","",""],[5,"fgetc","",""],[5,"fgets","",""],[5,"fputc","",""],[5,"fputs","",""],[5,"puts","",""],[5,"ungetc","",""],[5,"fread","",""],[5,"fwrite","",""],[5,"fseek","",""],[5,"ftell","",""],[5,"rewind","",""],[5,"fgetpos","",""],[5,"fsetpos","",""],[5,"feof","",""],[5,"ferror","",""],[5,"perror","",""],[0,"stdlib","libc::funcs::c95",""],[5,"abs","libc::funcs::c95::stdlib",""],[5,"labs","",""],[5,"atof","",""],[5,"atoi","",""],[5,"strtod","",""],[5,"strtol","",""],[5,"strtoul","",""],[5,"calloc","",""],[5,"malloc","",""],[5,"realloc","",""],[5,"free","",""],[5,"exit","","Exits the running program in a possibly dangerous manner."],[5,"_exit","",""],[5,"atexit","",""],[5,"system","",""],[5,"getenv","",""],[5,"rand","",""],[5,"srand","",""],[0,"string","libc::funcs::c95",""],[5,"strcpy","libc::funcs::c95::string",""],[5,"strncpy","",""],[5,"strcat","",""],[5,"strncat","",""],[5,"strcmp","",""],[5,"strncmp","",""],[5,"strcoll","",""],[5,"strchr","",""],[5,"strrchr","",""],[5,"strspn","",""],[5,"strcspn","",""],[5,"strpbrk","",""],[5,"strstr","",""],[5,"strlen","",""],[5,"strerror","",""],[5,"strtok","",""],[5,"strxfrm","",""],[5,"wcslen","",""],[5,"memcmp","",""],[5,"memchr","",""],[0,"posix88","libc::funcs",""],[0,"stat_","libc::funcs::posix88",""],[5,"chmod","libc::funcs::posix88::stat_",""],[5,"fchmod","",""],[5,"fstat","",""],[5,"mkdir","",""],[5,"mkfifo","",""],[5,"stat","",""],[0,"stdio","libc::funcs::posix88",""],[5,"popen","libc::funcs::posix88::stdio",""],[5,"pclose","",""],[5,"fdopen","",""],[5,"fileno","",""],[0,"fcntl","libc::funcs::posix88",""],[5,"open","libc::funcs::posix88::fcntl",""],[5,"creat","",""],[5,"fcntl","",""],[0,"dirent","libc::funcs::posix88",""],[5,"opendir","libc::funcs::posix88::dirent",""],[5,"readdir_r","",""],[5,"closedir","",""],[5,"rewinddir","",""],[5,"seekdir","",""],[5,"telldir","",""],[0,"unistd","libc::funcs::posix88",""],[5,"access","libc::funcs::posix88::unistd",""],[5,"alarm","",""],[5,"chdir","",""],[5,"chown","",""],[5,"close","",""],[5,"dup","",""],[5,"dup2","",""],[5,"execv","",""],[5,"execve","",""],[5,"execvp","",""],[5,"fork","",""],[5,"fpathconf","",""],[5,"getcwd","",""],[5,"getegid","",""],[5,"geteuid","",""],[5,"getgid","",""],[5,"getgroups","",""],[5,"getlogin","",""],[5,"getopt","",""],[5,"getpgrp","",""],[5,"getpid","",""],[5,"getppid","",""],[5,"getuid","",""],[5,"getsid","",""],[5,"isatty","",""],[5,"link","",""],[5,"lseek","",""],[5,"pathconf","",""],[5,"pause","",""],[5,"pipe","",""],[5,"read","",""],[5,"rmdir","",""],[5,"setgid","",""],[5,"setpgid","",""],[5,"setsid","",""],[5,"setuid","",""],[5,"sleep","",""],[5,"usleep","",""],[5,"nanosleep","",""],[5,"sysconf","",""],[5,"tcgetpgrp","",""],[5,"ttyname","",""],[5,"unlink","",""],[5,"write","",""],[5,"pread","",""],[5,"pwrite","",""],[5,"utime","",""],[17,"_PC_NAME_MAX","",""],[0,"signal","libc::funcs::posix88",""],[5,"kill","libc::funcs::posix88::signal",""],[0,"mman","libc::funcs::posix88",""],[5,"mlock","libc::funcs::posix88::mman",""],[5,"munlock","",""],[5,"mlockall","",""],[5,"munlockall","",""],[5,"mmap","",""],[5,"munmap","",""],[5,"mprotect","",""],[5,"msync","",""],[5,"shm_open","",""],[5,"shm_unlink","",""],[0,"net","libc::funcs::posix88",""],[5,"if_nametoindex","libc::funcs::posix88::net",""],[0,"posix01","libc::funcs",""],[0,"stat_","libc::funcs::posix01",""],[5,"lstat","libc::funcs::posix01::stat_",""],[0,"unistd","libc::funcs::posix01",""],[5,"readlink","libc::funcs::posix01::unistd",""],[5,"fsync","",""],[5,"fdatasync","",""],[5,"setenv","",""],[5,"unsetenv","",""],[5,"putenv","",""],[5,"symlink","",""],[5,"ftruncate","",""],[0,"signal","libc::funcs::posix01",""],[5,"signal","libc::funcs::posix01::signal",""],[0,"glob","libc::funcs::posix01",""],[5,"glob","libc::funcs::posix01::glob",""],[5,"globfree","",""],[0,"mman","libc::funcs::posix01",""],[5,"posix_madvise","libc::funcs::posix01::mman",""],[0,"bsd43","libc::funcs",""],[5,"socket","libc::funcs::bsd43",""],[5,"connect","",""],[5,"bind","",""],[5,"listen","",""],[5,"accept","",""],[5,"getpeername","",""],[5,"getsockname","",""],[5,"setsockopt","",""],[5,"recv","",""],[5,"send","",""],[5,"recvfrom","",""],[5,"sendto","",""],[5,"getifaddrs","",""],[5,"freeifaddrs","",""],[5,"shutdown","",""],[0,"bsd44","libc::funcs",""],[5,"getdtablesize","libc::funcs::bsd44",""],[5,"ioctl","",""],[5,"madvise","",""],[5,"mincore","",""]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};

initSearch(searchIndex);
